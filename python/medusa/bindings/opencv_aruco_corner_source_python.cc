/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(opencv_aruco_corner_source.h) */
/* BINDTOOL_HEADER_FILE_HASH(45be0c51cf18e24c012af4f693bdfc5d)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/medusa/opencv_aruco_corner_source.h>
// pydoc.h is automatically generated in the build directory
#include <opencv_aruco_corner_source_pydoc.h>

void bind_opencv_aruco_corner_source(py::module& m)
{

    using opencv_aruco_corner_source = gr::medusa::opencv_aruco_corner_source;

    py::class_<opencv_aruco_corner_source,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<opencv_aruco_corner_source>>(
        m, "opencv_aruco_corner_source", D(opencv_aruco_corner_source))

        .def(py::init(&opencv_aruco_corner_source::make),
             py::arg("video_source"),
             py::arg("width"),
             py::arg("height"),
             py::arg("dictionary"),
             py::arg("marker_side_length"),
             py::arg("calibration_file"),
             py::arg("draw_markers"),
             py::arg("draw_poses"),
             py::arg("adaptiveThreshConstant"),
             py::arg("adaptiveThreshWinSizeMax"),
             py::arg("adaptiveThreshWinSizeMin"),
             py::arg("adaptiveThreshWinSizeStep"),
             py::arg("cornerRefinementMaxIterations"),
             py::arg("cornerRefinementMethod"),
             py::arg("cornerRefinementMinAccuracy"),
             py::arg("cornerRefinementWinSize"),
             py::arg("detectInvertedMarker"),
             py::arg("errorCorrectionRate"),
             py::arg("markerBorderBits"),
             py::arg("maxErroneousBitsInBorderRate"),
             py::arg("maxMarkerPerimeterRate"),
             py::arg("minCornerDistanceRate"),
             py::arg("minDistanceToBorder"),
             py::arg("minMarkerDistanceRate"),
             py::arg("minMarkerLengthRatioOriginalImg"),
             py::arg("minMarkerPerimeterRate"),
             py::arg("minOtsuStdDev"),
             py::arg("minSideLengthCanonicalImg"),
             py::arg("perspectiveRemoveIgnoredMarginPerCell"),
             py::arg("perspectiveRemovePixelPerCell"),
             py::arg("polygonalApproxAccuracyRate"),
             py::arg("useAruco3Detection"),
             D(opencv_aruco_corner_source, make))


        ;
}
